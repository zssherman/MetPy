

.. _sphx_glr_examples_calculations_Dewpoint_and_Mixing_Ratio.py:


Dewpoint and Mixing Ratio
=========================

Use functions from `metpy.calc` as well as pint's unit support to perform calculations.

The code below converts the mixing ratio value into
a value for vapor pressure assuming both 1000mb and 850mb ambient air
pressure values. It also demonstrates converting the resulting dewpoint
temperature to degrees Fahrenheit.



.. code-block:: python

    import metpy.calc as mpcalc
    from metpy.units import units







Create a test value of mixing ratio in grams per kilogram



.. code-block:: python

    mixing = 10 * units('g/kg')
    print(mixing)





.. rst-class:: sphx-glr-script-out

 Out::

    10.0 gram / kilogram


Now throw that value with units into the function to calculate
the corresponding vapor pressure, given a surface pressure of 1000 mb



.. code-block:: python

    e = mpcalc.vapor_pressure(1000. * units.mbar, mixing)
    print(e)





.. rst-class:: sphx-glr-script-out

 Out::

    15823.283396314564 gram * millibar / kilogram


Take the odd units and force them to millibars



.. code-block:: python

    print(e.to(units.mbar))





.. rst-class:: sphx-glr-script-out

 Out::

    15.823283396314565 millibar


Take the raw vapor pressure and throw into the dewpoint function



.. code-block:: python

    td = mpcalc.dewpoint(e)
    print(td)





.. rst-class:: sphx-glr-script-out

 Out::

    13.854135353732214 degC


Which can of course be converted to Fahrenheit



.. code-block:: python

    print(td.to('degF'))





.. rst-class:: sphx-glr-script-out

 Out::

    56.937444036717935 degF


Now do the same thing for 850 mb, approximately the pressure of Denver



.. code-block:: python

    e = mpcalc.vapor_pressure(850. * units.mbar, mixing)
    print(e.to(units.mbar))





.. rst-class:: sphx-glr-script-out

 Out::

    13.449790886867381 millibar


And print the corresponding dewpoint



.. code-block:: python

    td = mpcalc.dewpoint(e)
    print(td, td.to('degF'))




.. rst-class:: sphx-glr-script-out

 Out::

    11.376545231347285 degC 52.47778181642507 degF


**Total running time of the script:** ( 0 minutes  0.004 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: Dewpoint_and_Mixing_Ratio.py <Dewpoint_and_Mixing_Ratio.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: Dewpoint_and_Mixing_Ratio.ipynb <Dewpoint_and_Mixing_Ratio.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
